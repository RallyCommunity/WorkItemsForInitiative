../..//Apps/charts/burndown/BurnDownApp.js:                        operator: '=',
../..//Apps/charts/burndown/BurnDownApp.js:                        operator: '=',
../..//Apps/charts/burndown/BurnDownApp.js:                        operator: '=',
../..//Apps/charts/burndown/BurnDownApp.js:                        operator: '>=',
../..//Apps/charts/burndown/BurnDownApp.js:                        operator: '<=',
../..//Apps/charts/settings/PortfolioItemPicker.js:                        operator: "=",
../..//Apps/DefectsByCustomFieldValue/App.js:                operator: app.down('#releaseNot').getValue() ? '!=' : '=',
../..//Apps/DefectsByCustomFieldValue/App.js:                operator: app.down('#fieldNot').getValue() ? '!=' : '=',
../..//Apps/DefectsByCustomFieldValue/App.js:                operator: app.down('#stateNot').getValue() ? '!=' : '=',
../..//Apps/lumenize-0.7.3.js:// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
../..//Apps/lumenize-0.7.3.js:          operator;
../..//Apps/lumenize-0.7.3.js:          operator = "<=";
../..//Apps/lumenize-0.7.3.js:          operator = rule[ 4 ].substr( 3, 2 );
../..//Apps/lumenize-0.7.3.js:        if ( operator === ">=" ) // Go forwards.
../..//Apps/lumenize-0.7.3.js:        else // Go backwards.  Looking for the last of a certain day, or operator is "<=" (less likely).
../..//Apps/PersonalBurnDown/BurnDownApp.js:                        operator: '=',
../..//Apps/PersonalBurnDown/BurnDownApp.js:                        operator: '=',
../..//Apps/PersonalBurnDown/BurnDownApp.js:                        operator: '=',
../..//Apps/PersonalBurnDown/BurnDownApp.js:                        operator: '>=',
../..//Apps/PersonalBurnDown/BurnDownApp.js:                        operator: '<=',
../..//Apps/PersonalBurnDown/PortfolioItemPicker.js:                        operator: "=",
../..//Apps/portfolioBurnDown/App.js://                filters: [{"property":"Ordinal","operator":"=","value":0}]
../..//Apps/PortfolioDrilldownApp/src/PortfolioDrilldownApp.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp/src/PortfolioDrilldownApp.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp/src/TreeStore.js:            //operator: '=',
../..//Apps/PortfolioDrilldownApp/src/TreeStore.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp/src/TreeStore.js:            operator: '=',
../..//Apps/PortfolioDrilldownApp-master/src/PortfolioDrilldownApp.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp-master/src/PortfolioDrilldownApp.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp-master/src/TreeStore.js:            //operator: '=',
../..//Apps/PortfolioDrilldownApp-master/src/TreeStore.js:          operator: '=',
../..//Apps/PortfolioDrilldownApp-master/src/TreeStore.js:            operator: '=',
../..//Apps/PortfolioEstimationBoard-master/App.js:                        operator: 'Contains',
../..//Apps/PortfolioForecast-master/App.js:                operator: '=',
../..//Apps/PortfolioForecast-master/App.js:                        operator: '>',
../..//Apps/PortfolioForecast-master/App.js:                        operator: '<',
../..//Apps/PortfolioForecast-master/App.js:                        operator: '>',
../..//Apps/PortfolioForecast-master/App.js:                        operator: '<',
../..//Apps/PSITrackingApp/src/ReleaseTrackingApp.js:          operator: '=',
../..//Apps/PSITrackingApp/src/ReleaseTrackingApp.js:          operator: '=',
../..//Apps/PSITrackingApp/src/statsbanner/LateStories.js:              operator: '=',
../..//Apps/PSITrackingApp/src/statsbanner/LateStories.js:              operator: '=',
../..//Apps/PSITrackingApp/src/statsbanner/LateStories.js:                operator: '>',
../..//Apps/PSITrackingApp/src/statsbanner/LateStories.js:                operator: '>',
../..//Apps/PSITrackingApp/treegrid/TreeStore.js:            //operator: '=',
../..//Apps/PSITrackingApp/treegrid/TreeStore.js:          operator: '=',
../..//Apps/PSITrackingApp/treegrid/TreeStore.js:            operator: '=',
../..//Apps/rally-pi-allocation-master/App.js:                filters: [{"property":"Ordinal","operator":">","value":0}]
../..//Apps/rally-pi-allocation-master/App.js:            operator:'=',
../..//Apps/rally-pi-allocation-master/App.js:                    operator:'=',
../..//Apps/rally-pi-allocation-master/App.js:        var filters = Ext.create('Rally.data.QueryFilter',{property:"DirectChildrenCount",operator:'=',value:0});
../..//Apps/rally-pi-allocation-master/App.js:        filters = filters.and(Ext.create('Rally.data.QueryFilter',{property:'ScheduleState',operator:'>',value:'Defined'}));
../..//Apps/rally-pi-allocation-master/App.js:                operator: ">=",
../..//Apps/rally-pi-allocation-master/App.js:                operator: "<=",
../..//Apps/rally-portfolio-status-master/App.js:                    operator: '=',
../..//Apps/release-defect-trend/src/App.js:                    operator: 'in',
../..//Apps/release-defect-trend/src/App.js:                    operator: 'in',
../..//Apps/release-defect-trend/src/App.js:                    operator: '>',
../..//Apps/TaskBoard/TaskBoardApp.js:                        operator: '<',
../..//Apps/TaskBoard/TaskBoardApp.js:                        operator: '<',
../..//Apps/TeamPlanApp_gash1/TreeStore.js:            //operator: '=',
../..//Apps/TeamPlanApp_gash1/TreeStore.js:          operator: '=',
../..//Apps/TeamPlanApp_gash1/TreeStore.js:            operator: '=',
../..//Apps/TeamPlanApp_gash2/App.js://                        operator: 'contains',
../..//Apps/TeamPlanApp_gash2/App.js://                            operator: 'contains',
../..//sdk-debug-2.0rc3.js: * - Conditional processing with basic comparison operators
../..//sdk-debug-2.0rc3.js: * - Many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created
../..//sdk-debug-2.0rc3.js: * The **tpl** tag and the **for** operator are used to process the provided data object:
../..//sdk-debug-2.0rc3.js: * The **foreach** operator is used to loop over an object's properties.  The following
../..//sdk-debug-2.0rc3.js: * # Conditional processing with basic comparison operators
../..//sdk-debug-2.0rc3.js: * The **tpl** tag and the **if** operator are used to provide conditional checks for deciding whether or not to render
../..//sdk-debug-2.0rc3.js: * The following basic math operators may be applied directly on numeric data values:
../..//sdk-debug-2.0rc3.js:            fn = DQ.operators[op],
../..//sdk-debug-2.0rc3.js:        operators: {
../..//sdk-debug-2.0rc3.js:        domQueryOperators = Ext.dom.Query.operators,
../..//sdk-debug-2.0rc3.js:        filterByAttribute = function(items, property, operator, compareTo) {
../..//sdk-debug-2.0rc3.js:                    else if (operator === '~=') {
../..//sdk-debug-2.0rc3.js:                                if (domQueryOperators[operator](Ext.coerce(propValue[j], compareTo), compareTo)) {
../..//sdk-debug-2.0rc3.js:                    } else if (!compareTo ? !!candidate[property] : domQueryOperators[operator](Ext.coerce(propValue, compareTo), compareTo)) {
../..//sdk-debug-2.0rc3.js:    operator: null,
../..//sdk-debug-2.0rc3.js:    operatorFns: {
../..//sdk-debug-2.0rc3.js:        if (me.operator) {
../..//sdk-debug-2.0rc3.js:            return me.operatorFns[me.operator];
../..//sdk-debug-2.0rc3.js:    this.prototype.operatorFns['=='] = this.prototype.operatorFns['='];
../..//sdk-debug-2.0rc3.js:                operatorIndex;
../..//sdk-debug-2.0rc3.js:            } else if (this.useSimpleAccessors === true || ((operatorIndex = String(map).search(re)) < 0)) {
../..//sdk-debug-2.0rc3.js:            } else if (operatorIndex === 0) {
../..//sdk-debug-2.0rc3.js:     *          operator: '=',
../..//sdk-debug-2.0rc3.js:     *             operator: 'Contains',
../..//sdk-debug-2.0rc3.js:                var operator = filter.operator;
../..//sdk-debug-2.0rc3.js:                if (!operator) {
../..//sdk-debug-2.0rc3.js:                    operator = filter.anyMatch ? 'Contains' : '=';
../..//sdk-debug-2.0rc3.js:                    operator: operator,
../..//sdk-debug-2.0rc3.js:             *             operator: '=',
../..//sdk-debug-2.0rc3.js:             *             operator: 'contains',
../..//sdk-debug-2.0rc3.js:             *             operator: '=',
../..//sdk-debug-2.0rc3.js:             *             operator: 'contains',
../..//sdk-debug-2.0rc3.js:             * The operator to use in the query
../..//sdk-debug-2.0rc3.js:             * Valid operators
../..//sdk-debug-2.0rc3.js:             *     Note: operators are not case sensitive
../..//sdk-debug-2.0rc3.js:            operator: '='
../..//sdk-debug-2.0rc3.js:         * @param {String} operator The operator for the query, such as '='
../..//sdk-debug-2.0rc3.js:        _createQueryString: function(property, operator, value) {
../..//sdk-debug-2.0rc3.js:            return "(" + property.toString() + " " + operator + " " + value.toString() + ")";
../..//sdk-debug-2.0rc3.js:         * @param {String} joinOperator The operator to join with, either 'AND' or 'OR'
../..//sdk-debug-2.0rc3.js:        _joinQuery: function(filter, joinOperator) {
../..//sdk-debug-2.0rc3.js:            if (filter._createQueryString && filter.operator) {
../..//sdk-debug-2.0rc3.js:                operator: joinOperator,
../..//sdk-debug-2.0rc3.js:            return this._createQueryString(this.property, this.operator, value);
../..//sdk-debug-2.0rc3.js:         *          operator: '=',
../..//sdk-debug-2.0rc3.js:         *         operator: 'contains',
../..//sdk-debug-2.0rc3.js:         *          operator: '=',
../..//sdk-debug-2.0rc3.js:         *         operator: 'contains',
../..//sdk-debug-2.0rc3.js:            allowedqueryoperator: "AllowedQueryOperator",
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                            operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: 'contains',
../..//sdk-debug-2.0rc3.js:            if(!filter.operator || filter.operator === '=') {
../..//sdk-debug-2.0rc3.js:             * @cfg {String} operator
../..//sdk-debug-2.0rc3.js:             * Filter operator
../..//sdk-debug-2.0rc3.js:            operator: '=',
../..//sdk-debug-2.0rc3.js:            config.operator = filter.operator;
../..//sdk-debug-2.0rc3.js:                    operator: _this.config.operator,
../..//sdk-debug-2.0rc3.js:     *          operator: '<',
../..//sdk-debug-2.0rc3.js:     *                 operator: '<',
../..//sdk-debug-2.0rc3.js:                var operator = filter.operator;
../..//sdk-debug-2.0rc3.js:                if (!operator) {
../..//sdk-debug-2.0rc3.js:                    operator = filter.anyMatch ? 'Contains' : '=';
../..//sdk-debug-2.0rc3.js:                    operator: operator,
../..//sdk-debug-2.0rc3.js:             *             operator: '<',
../..//sdk-debug-2.0rc3.js:             *            operator: '<',
../..//sdk-debug-2.0rc3.js:             * The operator to use in the query
../..//sdk-debug-2.0rc3.js:             * Valid operators
../..//sdk-debug-2.0rc3.js:             *     Note: operators are not case sensitive
../..//sdk-debug-2.0rc3.js:            operator: '='
../..//sdk-debug-2.0rc3.js:         * Map the filter operator to the equivalent Lookback API operator
../..//sdk-debug-2.0rc3.js:        _getOperator: function(op) {
../..//sdk-debug-2.0rc3.js:         * @param {String} joinOperator The operator to join with, either '$and' or '$or'
../..//sdk-debug-2.0rc3.js:        _joinQuery: function(filter, joinOperator) {
../..//sdk-debug-2.0rc3.js:            if (filter._createQueryString && filter.operator) {
../..//sdk-debug-2.0rc3.js:                operator: joinOperator,
../..//sdk-debug-2.0rc3.js:            if (this.operator === '=') {
../..//sdk-debug-2.0rc3.js:            } else if (this.operator.toLowerCase() === 'contains') {
../..//sdk-debug-2.0rc3.js:            } else if (this.operator === '$and') {
../..//sdk-debug-2.0rc3.js:            } else if (this.operator === '$or') {
../..//sdk-debug-2.0rc3.js:                value[this._getOperator(this.operator)] = this.value;
../..//sdk-debug-2.0rc3.js:         *         operator: '<',
../..//sdk-debug-2.0rc3.js:         *         operator: '<',
../..//sdk-debug-2.0rc3.js:                    operator: '<=',
../..//sdk-debug-2.0rc3.js:     *                 operator: 'in',
../..//sdk-debug-2.0rc3.js:     *                 operator: '<',
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:        operators: ['=','!=','<=','>=','<','>','AND','OR','!CONTAINS','CONTAINS'],
../..//sdk-debug-2.0rc3.js:                var expression = this.applyOperators(this.operators);
../..//sdk-debug-2.0rc3.js:        applyOperators: function (operators, operator) {
../..//sdk-debug-2.0rc3.js:            if (!operators.length) {
../..//sdk-debug-2.0rc3.js:            if (!operator) {
../..//sdk-debug-2.0rc3.js:                operator = operators[0];
../..//sdk-debug-2.0rc3.js:            var property = this.applyOperators(operators.slice(1));
../..//sdk-debug-2.0rc3.js:            while (this.peek() === operator) {
../..//sdk-debug-2.0rc3.js:                this.consume(operator);
../..//sdk-debug-2.0rc3.js:                var value = this.applyOperators(operators.slice(1));
../..//sdk-debug-2.0rc3.js:                    operator: operator,
../..//sdk-debug-2.0rc3.js:        _operatorsToUpperCase: function (string) {
../..//sdk-debug-2.0rc3.js:            this.string = this._operatorsToUpperCase(this.string);
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: '=',
../..//sdk-debug-2.0rc3.js:                                    operator: '=',
../..//sdk-debug-2.0rc3.js:            operator: 'contains'
../..//sdk-debug-2.0rc3.js:                    operator:'<=',
../..//sdk-debug-2.0rc3.js:                operator: '!=',
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                    operator: 'contains',
../..//sdk-debug-2.0rc3.js:                    operator: '='
../..//sdk-debug-2.0rc3.js:                        operator: '!='
../..//sdk-debug-2.0rc3.js:                        operator: '!='
../..//sdk-debug-2.0rc3.js:                    operator: '!=',
../..//sdk-debug-2.0rc3.js:            operator: '!=',
../..//sdk-debug-2.0rc3.js:                operator: '=',
../..//sdk-debug-2.0rc3.js:                operator: '=',
../..//sdk-debug-2.0rc3.js:                    operator: '='
../..//sdk-debug-2.0rc3.js:                            operator: '=',
../..//sdk-debug-2.0rc3.js:                            operator: '=',
../..//sdk-debug-2.0rc3.js:                            operator: '!=',
../..//sdk-debug-2.0rc3.js:                    operator: 'Contains'
../..//sdk-debug-2.0rc3.js:                    operator: 'Contains',
../..//sdk-debug-2.0rc3.js:                operator: '=',
../..//sdk-debug-2.0rc3.js:                operator: '=',
../..//sdk-debug-2.0rc3.js:                operator: '!=',
../..//sdk-debug-2.0rc3.js:                while (userFilter.operator === 'OR') {
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: "=",
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                    operator: '=',
../..//sdk-debug-2.0rc3.js:                        operator: '>',
../..//sdk-debug-2.0rc3.js:                        operator: '>',
../..//sdk-debug-2.0rc3.js:     *                              operator: '=',
../..//sdk-debug-2.0rc3.js:                            operator: '!=',
../..//sdk-debug-2.0rc3.js:                            operator: '=',
../..//sdk-debug-2.0rc3.js:                            operator: '=',
../..//sdk-debug-2.0rc3.js:                    operator: "=",
../..//sdk-debug-2.0rc3.js:                    operator: "=",
../..//sdk-debug-2.0rc3.js:                    operator: "=",
../..//sdk-debug-2.0rc3.js:                        operator: '='
../..//sdk-debug-2.0rc3.js:                        operator: '='
../..//Working Apps/StoriesFilteredByActualRelease/App.js:                operator: app.down('#releaseNot').getValue() ? '!=' : '=',
../..//Working Apps/StoriesFilteredByActualRelease/App.js:                operator: app.down('#fieldNot').getValue() ? '!=' : '=',
../..//Working Apps/StoriesFilteredByActualRelease/App.js:                operator: app.down('#stateNot').getValue() ? '!=' : '=',
../..//Working Apps/StoryStateOnDefectCreation/App.js:                    operator: '<',
../..//Working Apps/StoryStateOnDefectCreation/App.js:                    operator: '>=',
../..//Working Apps/StoryStateOnDefectCreation/App.js:                        operator: '=',
../..//Working Apps/StoryStateOnDefectCreation/App.js:                        operator: '=',
